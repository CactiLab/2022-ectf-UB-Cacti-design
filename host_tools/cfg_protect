#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Configuration Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import logging
from pathlib import Path
from Crypto.Cipher import AES
import struct
import os
import math
from util import print_banner, CONFIGURATION_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)

CFG_MAGIC = b'CFG'
IV_SIZE = 12
TAG_SIZE = 16
MAX_BLOCK_SIZE = 2048
MAX_TAG_NUM = 32

cfg_key_path = "/secrets/keyc.bin"
# cfg_key_path = "keyc.bin"

def encrypt_cfg_data(ivc, cfg_data):
    cfg_ciphertext = b''
    tagc = b''
    try:
        with open(cfg_key_path, "rb") as file:
            key_c = file.read()

            blocks = math.ceil(len(cfg_data) / MAX_BLOCK_SIZE)
            for x in range(blocks):
                if x == range(blocks)[-1]:
                    partial_data = cfg_data[MAX_BLOCK_SIZE * x:]
                else:
                    partial_data = cfg_data[MAX_BLOCK_SIZE * x: MAX_BLOCK_SIZE * (x+1)]
                cipher = AES.new(key_c, AES.MODE_GCM, nonce=ivc)
                cfg_cipher_partial, tagc_partial = cipher.encrypt_and_digest(partial_data)
                cfg_ciphertext += cfg_cipher_partial
                tagc += tagc_partial
            
            tagc += b'\xff' * (MAX_TAG_NUM - blocks) * TAG_SIZE
            # log.info(f"blcoks: {blocks}")
            # log.info("should have padding")
            
            # log.info(tagc.hex())
            # log.info("cipher :")
            # log.info(len(cfg_ciphertext))
            # log.info(cfg_ciphertext.hex())
            return cfg_ciphertext, tagc
    # Raise error if the file is opened before
    except IOError:
        log.info("Failed to open the file: " + cfg_key_path)


# def encrypt_cfg_data(ivc, cfg_data):
#     try:
#         with open(cfg_key_path, "rb") as file:
#             # Print the success message
#             key_c = file.read()
#             # log.info("KEY c: ")
#             # log.info(key_c.hex())
#             # log.info("KEY IVc: ")
#             # log.info(ivc.hex())
#             # log.info("cfg_data:")
#             # log.info(cfg_data.hex())
#             cipher = AES.new(key_c, AES.MODE_GCM, nonce=ivc)
#             cfg_ciphertext, tagc = cipher.encrypt_and_digest(cfg_data)
#             # log.info("cfg_data cipher:")
#             # log.info(cfg_ciphertext.hex())
#             # log.info("cfg tag:")
#             # log.info(tagc.hex())
#             return cfg_ciphertext, tagc
#     # Raise error if the file is opened before
#     except IOError:
#         log.info("Failed to open the file: " + cfg_key_path)


def protect_configuration(raw_cfg: Path, protected_cfg: Path):
    print_banner("SAFFIRe Configuration Protect Tool")

    # Read in the raw configuration binary
    log.info("Reading configuration data...")
    file_data = raw_cfg.read_bytes()
    cfg_len = len(file_data)
    # log.info("CFG len")
    # log.info(cfg_len)
    ivc =  os.urandom(IV_SIZE)
    cfg_ciphertext, tagc = encrypt_cfg_data(ivc, file_data)
    # log.info(f"tag size: {len(tagc)}")
    log.info("Packaging the configuration...")

    # Write to the output file
    protected_cfg.write_bytes(CFG_MAGIC + struct.pack("<I", cfg_len) + ivc + tagc + cfg_ciphertext)

    log.info("Configuration protected\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input-file", help="The name of the configuration to protect.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected configuration.", required=True
    )

    args = parser.parse_args()

    # process command
    raw_cfg = CONFIGURATION_ROOT / args.input_file
    protected_cfg = CONFIGURATION_ROOT / args.output_file
    protect_configuration(raw_cfg, protected_cfg)


if __name__ == "__main__":
    main()
