#!/usr/bin/python3 -u

# 2022 eCTF
# Update Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import json
import logging
from pathlib import Path
import socket
import struct

from util import print_banner, send_packets, RESP_OK, FIRMWARE_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)
FW_META_INFO_SIZE = 34
VERSION_DATA_SIZE = 20
REL_SIZE = 4
def update_firmware(socket_number: int, firmware_file: Path):
    print_banner("SAFFIRe Firmware Update Tool")
    protected_fw_data = b''
    log.info("Reading firmware file...")
    with firmware_file.open("rb") as fw:
        protected_fw_data = fw.read()
        FW_meta_data = protected_fw_data[0:FW_META_INFO_SIZE]
        # log.info(FW_meta_data.hex())
        version_data = protected_fw_data[FW_META_INFO_SIZE: FW_META_INFO_SIZE + VERSION_DATA_SIZE]
        # log.info(version_data.hex())
        rel_message_size_bytes =  protected_fw_data[FW_META_INFO_SIZE + VERSION_DATA_SIZE : FW_META_INFO_SIZE + VERSION_DATA_SIZE + REL_SIZE]
        actual_rel_size = struct.unpack('<I',rel_message_size_bytes)[0]
        # log.info(actual_rel_size)
        rel_msg_bytes = protected_fw_data[FW_META_INFO_SIZE + VERSION_DATA_SIZE+ REL_SIZE : FW_META_INFO_SIZE + VERSION_DATA_SIZE+ REL_SIZE + actual_rel_size]
        # log.info(rel_msg_bytes.hex())
        firmware = protected_fw_data[FW_META_INFO_SIZE + VERSION_DATA_SIZE+ REL_SIZE + actual_rel_size : ]
        # log.info(firmware.hex())

    # Connect to the bootloader
    log.info("Connecting socket...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(("saffire-net", socket_number))

        # Send update command
        log.info("Sending update command...")
        sock.send(b"U")

        # Receive bootloader acknowledgement
        log.info("Waiting for bootloader to enter update mode...")
        while sock.recv(1) != b"U":
            pass

        # Send the version, size, and release message
        log.info("Sending MAGIC, FW size, IVF, and Tagv...")
        # log.info(FW_meta_data.hex())
        # log.info("Meta data size :" + str(len(FW_meta_data)))
        sock.send(FW_meta_data)
        #Wait for bootloader response after magic checking
        response = sock.recv(1)

        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")
        else:
            log.info(f"Magic byte verification success")

        #Send version data
        sock.send(version_data)
        # log.info(version_data.hex())
        # log.info("VERSION DATA size: " + str(len(version_data)))
        #Wait for bootloader response after version intergrity checking
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")
        else:
            log.info(f"Version verification success")
        
        #Send Release message
        log.info("Sending Release Message....")
        payload = (rel_msg_bytes + b"\x00")
        #log.info('Release Message bytes: ' + str(payload))
        sock.send(payload)
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")
        else:
            log.info(f"Release message ACK received")
        
        # log.info("Firmware size: " + str(len(firmware)))
        # log.info(firmware.hex())

        # Send packets
        log.info("Sending firmware packets...")
        send_packets(sock, firmware)

        log.info("Firmware updated\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--socket",
        help="Port number of the socket to connect the host to the bootloader.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--firmware-file", help="Name of the firmware image to load.", required=True
    )

    args = parser.parse_args()

    firmware_file = FIRMWARE_ROOT / args.firmware_file

    update_firmware(args.socket, firmware_file)


if __name__ == "__main__":
    main()
