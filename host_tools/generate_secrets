#!/usr/bin/python3 -u

import logging
from pathlib import Path
import os
from util import print_banner, FIRMWARE_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)

AES_KEY_SIZE = 32

def write_key_bin(key, file_name):
    file_name = '/secrets/' + file_name
    try:
        with open(file_name, "wb") as file:
            # Print the success message
            file.write(key)
    # Raise error if the file is opened before
    except IOError:
        log.info("Failed to open the file.")

def write_eeprom_bin(key_v, key_f, key_c, public_key):
    file_name = '/secrets/eeprom.bin'
    try:
        with open(file_name, "wb") as file:
            # Print the success message
            file.write(key_v)
            file.write(key_f)
            file.write(key_c)
            file.write(public_key)
            log.info("-------------Writing eeprom data: Done-------------")
    # Raise error if the file is opened before
    except IOError:
        log.info("Failed to open the file.")

def get_public_key():
    try:
        with open("/host_tools/rsa/host_publicKey", "rb") as file:
            # Print the success message
            public_key = file.read()
            return public_key
    # Raise error if the file is opened before
    except IOError:
        log.info("Failed to open the public key file.")


def generate_key():
    key = os.urandom(AES_KEY_SIZE)
    return key

def main():

    print_banner("Generating SAFFIRe secrets")
    
    key_f = generate_key()
    key_c = generate_key()
    key_v = generate_key()

    write_key_bin(key_f, "keyf.bin")
    write_key_bin(key_c, "keyc.bin")
    write_key_bin(key_v, "keyv.bin")
    
    log.info("-------------Output binary key: Done-------------")

    rsa_key_generation_command = './host_tools/rsa/keygen'

    if not os.system(rsa_key_generation_command):
        log.info("Asymetric key generation success")
    else:
        log.info("!!!!!!!!!!!!!Asymetric key generation failed!!!!!!!!!!!!!!!!!!!!!")
        return

    public_key = get_public_key()

    # Delete public key
    try:
        os.remove("/host_tools/rsa/host_publicKey")
    # Raise error if the file is not there.
    except IOError:
        log.info("Fiailed to delete public key. ")
    write_eeprom_bin(key_v, key_f, key_c, public_key)
    

if __name__ == "__main__":
    main()
