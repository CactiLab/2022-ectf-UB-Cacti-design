#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Firmware Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import logging
from pathlib import Path
from Crypto.Cipher import AES
import struct
import os
import math
from util import print_banner, FIRMWARE_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)

FW_MAGIC = b'FW'
IV_SIZE = 12
MAX_BLOCK_SIZE = 4096
TAG_SIZE = 16
MAX_TAG_NUM = 4
fimrware_key_path = "/secrets/keyf.bin"
version_number_key_path = "/secrets/keyv.bin"
# fimrware_key_path = 'keyf.bin'
# version_number_key_path = 'keyv.bin'

def encrypt_version_number (ivf, version_data):
    # log.info("20 bytes of version number and tagf:")
    # log.info(version_data.hex())
    try:
        with open(version_number_key_path, "rb") as file:
            # Print the success message
            key_v = file.read()
            # log.info("KEY V: ")
            # log.info(key_v.hex())
            # log.info("KEY IVf: ")
            # log.info(ivf.hex())
            # log.info("Version cipher:")
            # log.info(version_data.hex())
            cipher = AES.new(key_v, AES.MODE_GCM, nonce=ivf)
            version_ciphertext, tagv = cipher.encrypt_and_digest(version_data)
            return version_ciphertext, tagv
    # Raise error if the file is opened before
    except IOError:
        log.info("Failed to open the file: " + version_number_key_path)

def encrypt_firmware_data(ivf, firmware_data):
    fw_ciphertext = b''
    tagf = b''
    try:
        with open(fimrware_key_path, "rb") as file:
            # Print the success message
            key_f = file.read()
            # log.info("KEY f: ")
            # log.info(key_f.hex())
            # log.info("KEY IVf: ")
            # log.info(ivf.hex())
            # log.info("firmware_data:")
            # log.info(firmware_data.hex())
            blocks = math.ceil(len(firmware_data) / MAX_BLOCK_SIZE)
            for x in range(blocks):
                if x == range(blocks)[-1]:
                    partial_data = firmware_data[MAX_BLOCK_SIZE * x:]
                else:
                    partial_data = firmware_data[MAX_BLOCK_SIZE * x: MAX_BLOCK_SIZE * (x+1)]
                cipher = AES.new(key_f, AES.MODE_GCM, nonce=ivf)
                fw_cipher_partial, tagf_partial = cipher.encrypt_and_digest(partial_data)
                fw_ciphertext += fw_cipher_partial
                tagf += tagf_partial

            tagf += b'\0' * (MAX_TAG_NUM - blocks) * TAG_SIZE
            # log.info("firmware_data cipher:")
            # log.info(fw_ciphertext.hex())
            # log.info("firmware tag:")
            # log.info(tagf.hex())
            return fw_ciphertext, tagf
    # Raise error if the file is opened before
    except IOError:
        log.info("Failed to open the file: " + fimrware_key_path)

def protect_firmware(
    firmware_file: Path, version: int, release_message: str, protected_firmware: Path
):
    print_banner("SAFFIRe Firmware Protect Tool")

    # Read in the raw firmware binary
    log.info("Reading the firmware...")
    firmware_data = firmware_file.read_bytes()

    log.info("Packaging the firmware...")

    # Construct the metadata
    firmware_size = len(firmware_data)
    ivf =  os.urandom(IV_SIZE)
    # log.info("Version number: " + str(version))
    # version_number_bytes = version.to_bytes(4, 'big')
    
    fw_ciphertext, tagf = encrypt_firmware_data(ivf, firmware_data)
    # log.info("TagF:")
    # log.info(tagf.hex())
    version_ciphertext, tagv = encrypt_version_number(ivf, struct.pack('<I', version) + tagf)
    # log.info(version_ciphertext.hex())
    rel_bytes = str.encode(release_message)
    # log.info(firmware_size)
    # log.info(tagv.hex())
    # log.info(struct.pack('<I', firmware_size))
    # log.info(len(rel_bytes))
    # Create firmware storage structure
    data = FW_MAGIC + struct.pack('<I', firmware_size) + ivf + tagv + version_ciphertext + struct.pack('<I', len(rel_bytes)) + rel_bytes + fw_ciphertext

    # Write to the output file
    try:
        with protected_firmware.open("wb") as fd:
            fd.write(data)
            log.info("Firmware protected...\n")
    except IOError:
        log.info("-----------------FAILED TO WRITE PROTECTED BINARY----------------")
    
    


def main():
    # get arguments
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--firmware", help="The name of the firmware image to protect.", required=True
    )
    parser.add_argument(
        "--version", help="The version of this firmware.", type=int, required=True
    )
    parser.add_argument(
        "--release-message", help="The release message of this firmware.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected firmware image.", required=True
    )

    args = parser.parse_args()

    # process command
    firmware_file = FIRMWARE_ROOT / args.firmware
    protected_firmware = FIRMWARE_ROOT / args.output_file
    protect_firmware(
        firmware_file, args.version, args.release_message, protected_firmware
    )


if __name__ == "__main__":
    main()
